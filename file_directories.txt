=====file & directories=====
====stat fstat lstat====
先看函数定义：
<code c>
#include <sys/stat.h>
int stat(const char* restrict pathname,struct stat* restrict buf);
int fstat(int filedes,struct stat* buf);
int lstat(const char* restrict pathname,struct stat* restrict buf);
</code>
返回0正常，返回-1错误。 \\
给我一个文件，返回给你文件的stat数据结构，fstat针对已经打开的文件，使用文件的描述符。lstat和stat参数是一样的，不同点就是如果文件是一个链接lstat不跟踪链接返回的是连接的stat结构，stat返回的是链接到的文件的stat结构。
====文件类型====
一般情况下文件就可以分为普通文件和目录，不过随着系统的发展，出现了不少新东西也归结到文件这中，所以文件类型就比较多了。struct stat的第一项就是mode_t st_mode；我们来看看到现在为止有多少文件类型：
  -普通文件
  -目录
  -链接文件
  -块文件
  -字符文件
  -socket文件
  -FIFO或者叫管道文件
unix中甚至允许进程间通讯使用的message quene semaphores share memory这些东西作为文件，并且定义了判断它们的方法。 \\
判断文件的类型有两种方法，一种是使用<sys/stat.h>中定义的宏S_ISREG S_ISDIR S_ISBLK S_ISCHR S_ISSOCK S_ISLNK S_ISFIFO。另一种方法是比较st_mode&S_IFMT与S_IFXXX的值，这也是S_ISXXX实现的过程，主要是因为有些老旧的系统没有添加这些宏，我们代码中就要麻烦一点啦！这两种方法都不能判断IPC对象的类型，它们有特殊的宏来判断，S_TYPEISMQ() S_TYPEISSEM() S_TYPEISSHM()这三个宏不使用stat.st_mode作为参数，而是使用&stat，也就是struct stat结构指针作为参数。 \\
说完了这些来总结一下：判断文件的类型首先要调用stat fstat lstat三个中的一个取得struct stat结构，然后使用S_ISREG S_ISDIR S_ISBLK S_ISCHR S_ISSOCK S_ISLNK S_ISFIFO S_TYPEISMQ() S_TYPEISSEM() S_TYPEISSHM()这十个宏就可以判断文件的类型了，如果前七个宏不存在，需要使用st_mode&S_IFMT的值与S_IFXXX比较。

====set-user-id set-group-id====
在struct stat结构中st_mode有两位可以通过S_ISUID S_ISGID来检查，如果S_ISUID被设置了，那么文件在执行的时候不使用它自己的uid而是使用struct stat结构中的st_uid结的值作为它的uid。举个例子，我的一个文件被设置成uid=0,那么它个文件执行的时候就有root权限，如su。
用法如下:
<code c>
if(stat.st_mode & S_ISUID) printf("uid is set.\n");
</code>
==== 文件的访问权限====
在struct stat.st_mode中还定义了文件的访问权限，总共有九种:
  * S_IRUSR
  * S_IWUSR
  * S_IXUSR
  * S_IRGRP
  * S_IWGRP
  * S_IXGRP
  * S_IROTH
  * S_IWOTH
  * S_IXOTH
非常的容易记，分成三组usr group other，每一组都是三个权限read write exec。读权限和执行权限是不一样的，读权限是我们可以把文件的内容列举出来，而执行权限对于目录来说就是可以通过比如我要打开/home/test/hi.h，那么我必须要对/ home test三个目录有执行权限，否则过不去呀，同样如果要在一个目录中创建文件，必须对这个目录拥有写权限和执行权限。
====新文件的权限====
在新文件创建时候也需要一个uid和一个gid，在linux中uid是进程的effective user id，groupid就要分情况了，如果新建文件的目录设置set-group-id位，新文件的group id就和目录的一致，否则用进程的effective group id。
====access====
access函数原型:
<code c>
int access(const char* pathname,int mode);
</code>
返回0正确，-1错误 \\
这个检查忽略set-user-id和set-group-id位，它直接检查进程的real user是对某一文件权限.mode有四个选择R_OK W_OK X_OK F_OK分别是可读，可写，可执行，文件存在.
<code c>
#include<unistd.h>
#include<stdio.h>
int
main (int argc, char *argv[])
{
  int ret;

  if (argc != 2)
    {
      printf ("Usage:\n\t./a.out file\n");
      return -1;
    }
  if ((ret = access (argv[1], R_OK)) == -1)
    printf ("no read priviledge.\n");
  else
    printf ("ok\n");
  return 0;
}
</code>
====umask====
umask函数原型:
<code c>
#include <sys/stat.h>
mode_t umask(mode_t cmask);
</code>
umask返回的是设置之前的mask值，mask的优先级最高，设置完mask之后就算创建文件使用的是777，创建之后的结果也只是mask的子集，看例子吧！
<code c>
#include <unistd.h>
#include <sys/types.h>
#include <string.h>
#include <stdio.h>
#include <sys/stat.h>

#define RWRWRW (S_IRUSR|S_IWUSR|S_IXUSR|S_IRGRP|S_IWGRP|S_IXGRP|S_IROTH|S_IWOTH|S_IXOTH)
int
main ()
{
  int ret;
  umask (0);
  if ((ret = creat ("foo1", RWRWRW)) == -1)
    printf ("creat file foo1 fail.\n");
  umask (S_IRUSR | S_IRGRP | S_IROTH);
  if ((ret = creat ("foo2", RWRWRW)) == -1)
    printf ("creat file foo2 fail.\n");
  return 0;
}
</coe>
<code bash>
-rwxrwxrwx 1 yanchao yanchao    0 Dec 24 15:40 foo1
--wx-wx-wx 1 yanchao yanchao    0 Dec 24 15:40 foo2
</code>
从例子和结果能看出来umask的作用了吧!
====chmod & fchmod====
先看函数原型:
<code c>
#include<sys/stat.h>
int chmod(const char* filepath,int mode);
int fchmod(int filedes,int mode);
</code>
返回0表示成功，-1表示失败 \\
为mode定义的变量有好多个，总结起来就是创建文件使用的那些变量再添加S_ISUID S_ISGID S_ISVTX S_IRWXU S_IRWXG S_IRWXO.
====sticky bit====
历史原因，在unix中可执行文件可以一个标志位sticky bit，在第一次被加载到系统中执行时它的txt部分代码被缓存到swap中，以便下次再执行些文件时快速加载。后来演变到在st_mode中有一们这个标志，但也只能superuser添加，而linux普通用户也有权限添加这一位，不过就是加了也没有用。再后来目录也可以添加这一位，它的功能就扩展了，如果某一目录设置了sticky bit只要对这个目录拥有写权限的前提下，你拥用该目录下的文件，你就可以删除这个文件或者重命名它，拥有这个目录你就直接可以删除目录了，或者是超级用户，那啥都能干了。它的好处是该目录所有用户都可以创建删除修改文件，但不能改变别人的文件。
====chown fchown lchown====
函数原型：
<code c>
#include <unistd.h>
int chown(const char* pathname,uid_t owner,gid_t group);
int fchown(int filedes,uid_t owner,gid_t group);
int lchown(const char* pathname , uid_t owner,gid_t group);
</code>
返回0表示成功，－1失败 \\
owner group的值都可以为-1，表示表示不做修改。有些系统只有superuser才能调用该功能，并且chown之后suid sgid位都会被清除掉。大部分系统不允许修改uid，但是可以修改gid，不过gid的取值必须是你所在的组，一个用户可以加入14个或者更多的组。
====文件的大小====
在struct stat结构中st_size表示文件的大小，st_blksize表示标准I/O使用的缓冲区大小，st_blocks以512byte为单位，表示文件占用了多少块，如果系统的块大小不是512就悲剧了，st_blocks的意义就不能表示块数了，所以它是不可移植的。
====truncate====
在open中打开文件有一个参数O_TRUNC,打开文件的时候顺便把文件清空，其它还有两个类似功能的函数
<code c>
#incluce <unistd.h>
int truncate(const char* path,off_t lenght);
int ftruncate(int filedes,off_t length);
</code>
返回0表示成功，-1表示错误 \\
这俩个函数并不一定要把文件清空，除非length=0，如果文件大小length，文件大于length的部分就不可见，如果文件小于length，系统的实现就不一样的了，有的无任何动作，有的把文件硬扩到那么大就是添加个hole。
====文件系统====
咱们把文件系统简单化成只有两种结构一个是i-node，另一个是directory entry。一个文件系统的起点就是那个根目录/它是一个directory entry，directory entry中有很多键值对，每一对对应着一个文件或者是目录，这个键值对就是directory entry结构的成员i-node号和文件名，i-node号指向i-node块，文件名就是i-node块定义的文件的文件名。然后整个文件系统就组织起来了。
<note>这只是我粗浅的理解</note>
====link unlink====
这两个函数一个是创建一个链接文件，一个是删除一个链接文件。函数原型是:
<code c>
#include <unistd.h>
int link(const char* exitingpath,const char* new path);
int unlink (const char* path);
</code>
link在创建链接的时候只负责最后那个文件名的创建，路径中的目录必须都是存在的，并且进程的user id必须要有可执行权限且最后一级目录要有写权限，因为创建一个链接就是修改最后一级的目录添加一个diretctory entry到data block。
unlink只需要把st_nlink值减一，如果变成了零就看看还有没有进程打开这个文件，如果没有就会被删除掉。如果还有进程打开这个文件，等进程关闭时内核也会检查该文件的引用值是否为0，是否还有进程打开它，如果都是0，文件会被删除。
====remove rename====
<code c>
#include<stdio.h>
int remove(const char* filepath);
int rename(const char* oldname,const char* newname);
</code>
执行成功返回0，错误返回－1 \\
remove的参数是文件是相当于unlink，参数是目录时相当于rmdir。 \\
rename的情况复杂一些，首先是进程在新旧路径下都要有exe权限，且文件的父目录要有写权限。如果rename的是文件，newname存在。只有在newname也是文件时才会删除rename并执行rename，如果newname是目录，且newname存在，必须要newname是目录，且是空的才可以删除newname目录执行rename。如果是link，重命名的只是链接文件，目标文件无变化。

