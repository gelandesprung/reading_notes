======signal======
singanl简单的理解就是软中断，一种处理异步事件的方法
=====signal的概念=====
signal都有一个以SIG开头的名字，linux中大约支持31个signal，这些signal的值就是一个大于0的整数，signal产生的大致有以下几种：
  * 终端产生的，contro-c产生一个SIGINT信号
  * 硬件错误产生的中断，比如哪个数被0除了，访问内存过界啦之类的。
  * 通过kill函数可以向指定的进程产生任何各类的signal，当然也有一些限制，当前进程要么是super user或者是与被操作进程属于相同的用户。
  * 通过kill命令也可以产生signal到某一个进程，
  * 软件在某些条件下也会产生signal通知进程什么事情发生了之类的应用场景
signal是一种很精典的异步事件处理方式，不需要查询某个变量以确定事件是否发生，而是告诉kernel某件事情发生时怎么做，做的方式有三个选择，第一个是忽略，第二个是捕捉到，便按默认处理，一般对信号的默认处理就是结束进程，第三个也是捕捉到信号，并按指定的函数来处理信号。有两个信号我们无法捕捉也无法忽略，它们是SIGKILL SIGSTOP，这两个信号是对付进程的杀手锏，要不然进程就无法无天了。挑向个我觉得常用的signal记录一下。
SIGABRT 这是由abort函数产生的信号量，进程收到这个信号量会非正常死亡
SIGALRM 这个是调用alarm()产生的信号，setitimer也可以触发这个信号
SIGCHLD 当子进程结束或者停止时产生SIGCHLD信号，传递给父进程，如果想知道子进程的状态变化就要捕捉这个信号，因为它的默认处理是忽略，一般的处理方式是wait或者waitpid得到结束子进程的ID和结束状态。
SIGCONT 这是一个job-control信号，发送给停止的进程，让进程继续工作，如果进程正在工作，些信号被忽略。
SIGFPE 前面提到的被零出就是产生SIGFPE信号，从名子上我们可以推测去这是浮点数运算出问题时产生的信号，所以当浮点数溢出时也产生这个信号。
SIGINT 当我们在终端输入DELETE或者CTRL＋C时产生的信号，发送到所以在前台运行的进程，通常被进来结束正在运行的进程，虽然会打印出很多意想不到的字符串。
SIGIO 这是一个异步IO事件，在linux中等同于SGIPOLL，默认的处理方式是结束进程。
SIGKILL 给超级用户提供了一种杀死所有进程的手段。
SIGPIPE 当我们向管道写数据时，读的一端已经关闭了，就会产生SIGPIPE这个信号，
SIGPOLL 前面提到SIGIO的值等同于它，在一个可轮询的设备上，特殊事件发生时会产生这个信号，具体没有解释，后面poll的时候会仔细说。
SIGPROF setitimer会触发这个信号，setitimer还会触发SIGALRM信号
SIGPWR 当硬件断电时产生，然后作用UPS电源供电，如果UPS电源的电量也不足时会再次产生这个信号，然后系统就要关机了。
SIGQUIT terminal driver产生的信号，产生的方式是按ctrl+\，它的功能和SIGINT一样杀死所有前台程序，不一样的是还产生core文件。
SIGSEGV 内存越界访问时产生的信号
SIGSTKFLT 栈溢出时产生的信号，协处理器的栈
SIGSTOP job-control signal 与SIGCONT对应它让进程停下来。
SIGSYS 当我们的代码中使用错误的系统调用时产生SIGSYS信号，主要的原因是代码使用新系统提供的接口，运行在旧系统上，才会产生这个信号SIGSYS
SIGTERM 发给进程，让进程体面的结束，效果和SIGKILL一样，区别是它可以被捕捉，而SIGKILL不可以被捕捉。所以体面一些，允许进程做一些清除工作。
SIGTSTP 这是一个交互的停止信号，由control-z产生，发送给所有前台进程
SIGURG 紧急情况下产生的，比如socket的外带数据。
SIGUSR1 SIGUSR2 这两个信号没有定义具体的意思留给用户使用。
SIGVTALRM 还是由setitimer触发的，这个函数还挺牛它还触发了SIGALRM SIGCONF
SIGWINCH 某一进程通过ioctl修改窗口个数值的时候，前台每个进程那会收到SIGWINCH信号量。
SIGXCPU 进程耗尽了自己的CPU时间时收到的通知单.
SIGXFSZ 由于进程资源的限制，创建太多的文件会收到这个通知，linux的做法是结束进程并产生一个core文件。
=====signal函数=====
<code c>
#include<signal.h>
void (*signal(int signo,void(*func)(int)))(int);
</code>
它返回的是一个函数指针，原型是void (*func)(int); \\
signal的忽略函数是SIG_IGN,默认处理函数是SIG_DEF，错误值是SIG_ERR. \\
大部分的signal处理方式是SIG_DEF,当程序调用exec函数时我们所设定的signal处理方法就会丢失，毕竟那些处理函数的地址在新程序中也没有意义不是！不过fork之后子进程继承父进程对于信号的处理方式，因为子进程是拷贝了一份父进程的内存布局，信号的处理函数还可以用。signal也有它的局限性，比如你不设置它的func你就不知道它的处理方式是什么。 \\
=====不可信signal=====
这个说的是以前的signal，现在的已经可信了，说它不可信是因为以前的实现在信号容易丢失，还有可能信号产生了就是没有告诉你。而且信号触发事件之后它的处理方式就回归默认值了，所以需要在事件的处理函数中重新设置，只是在中间这段时间可以还有信号产生，而我们还没有设置，于是默认处理结束进程，SB了吧！
=====中断的系统调用=====
早期的系统中，进程如果阻塞在一个低速设备上，会收到一个信号，并返回错误,erron的值设置为EINTR。基于这个原因系统调用被分成低速调用和正常调用两部分，低速调用主要是那些会永久阻塞的调用，“读” “写” “打开设备” “pause” “某些ioctl” “一些进程交互函数”。一般对这些错误返回的处理方式是：
<code c>
again:
if((n=read(fd,buf,BUFSIZE))<0){
  if(errno == EINTR)
    goto again;
}
</code>
=====可重入函数=====
函数分可重入和非可重入两种，对于那些返回一个函数指针，而内存空间又不是我们手动分配的那些函数都是不可重入函数。
可以在signal的handler中使用的函数有一个名子叫async-signal safe函数，它们不但是可重入的，而且不会被signal信号打断，也就是说在执行的时候signal会被阻塞！那些不可重入不能在signal的handler中使用的函数都有什么样的特征呢，前面也说了一点，现在仔细说一下，第一种就是它使用静态的数据结构，这个也不难理解，函数每次被调用数据结构都会被更新，如果函数在执行一半时被signal中断，而signal不巧又调用了这个函数，那数据结构不是乱了吗？所以它们不能在signal的handler中使用，第二种是就是前面说的那种调用malloc和free， 这与malloc的实现有关系，它维护的是一个表，被中断再调用会出问题，第三种是它们是标准IO库的函数，因为标准IO是构建在共享数据结构之上的。 \\
<note>我在网上查了一些资料，有这么几个概念，可重入函数，线程安全函数，信号安全函数。我们这里讨论的应该是信号安全函数，它有两点要求一是可重入，二是能屏蔽信号。满足这两点才是信号安全的</note>
=====可信的信号=====
内核是如何维护这些信号的呢，每一个进程的表中有一个int型结构，每一位表示一个信号类型，如果该类型信号是发给某个进程的，那么那个进程的那一位就会被标记。 \\
可信的信号是可以被阻塞的，从信号产生到信号发送给进程，这个过程有一段时间，被称为pending,被阻塞就意味着只产生，并不发送，也就是说这个pending的过程不存在。这个牛B的阻塞函数就是sigpending，另有一个mask码，控制哪些信号被本进程阻塞，它叫sigprocmask。这个sigset_t就是保存所有信号的结构体，我怀疑是一个int型的数据！
=====kill & raise=====
kill产生信号到其它进程，raise产生信号给自己用。如果kill把进程号设置自己的就等同于raise啦！
<code c>
#include<signal.h>
int kill(pid_t pid,int signo);
int raise(int signo);
</code>
0表示成功，-1表示失败
kill函数的pid值还是有讲究的，如果pid的值大于0，那就没有啥好说的，产生的信号会发给指定pid的进程，如果pid的值等于0呢，信号发送给那些组id的值与调用kill进程的组id相同的进程，并且调用进程还要有发送给这些进程信号的权限。也就是说pid的值等于0，信号是在组内传送的。如里pid的值小于零，那就把pid的值取个绝对值，以这个绝对值作为组id，所以组id等于这个值的进程，都会收到信号，前提是发送者有权限发送这样的信号给接收着。如果pid的值等于-1，这是一个特例，它把信号发送给所有的进程，只要它有权限发送。 \\
我爱死pause这个函数了，当alarm()产生一个信号后pause，等到alarm的处理函数退出时pause就醒了。
<code c>
#include<unistd.h>
int pause(void);
</code>
return -1 with errno set to EINTR \\

