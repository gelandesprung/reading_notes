======Thread======
=====简介=====
线程可以实现在一个进程中同时干几件事情！
线程转进程有以下几种优势
  *进程在实现事件处理的时候需要复杂的同步模式，而线程不需要，可以分出几个线程，每一个线程干针对一种事件
  *进程共享资源比较复杂，而线程是共用的
  *线程可以优化进程的效率，把无关的任务分离开，交叉执行，提高效率
  *在与用户交互的进程中使用线程可以缩减响应时间
线程也需要一个类型来识别它，pthread_t，为了可移植性，pthread_t被定义成一个结构，缺点就是我们在调试的时候无法打印它的值了，在linux中它被定义为unsigned long interger，也正是因为它是一个结构，还必须为经提供一个用于线程ID比较的函数
<code c>
#include<pthread.h>
int pthread_equal(pthread_t tid1,pthread_t tid2);
</code>
返回非零表示相等，返回零表示不相同。 \\
在线程内部可有一个方法获取自己的线程号：
<code c>
#include <pthread.h>
pthread_t pthread_self(void);
</code>
=====线程的创建函数=====
<code c>
#include<pthread.h>
int pthread_create(pthread_t *restrict tidp,const struct pthread_attr_t* restrict attr,void *(*	start_rtn)(void*),void* restrict arg);
</code>
返回0表示创建成功，否则就是错误号。

=====线程的冲突解决=====
<code c>
#include<pthread.h>
int pthread_mutex_init(pthread_mutex_t *restrict mutex,pthread_mutexattr_t *restrict attr);

int pthread_mutex_destroy(pthread_mutex_t *mutex);

int pthread_mutex_lock(pthread_mutex_t *mutex);

int pthread_mutex_trylock(pthread_mutex_t *mutex);

int pthread_mutex_unlock(pthread_mutex_t *mutex);

</code>

<code c>
#include<pthread.h>
int pthread_rwlock_int(pthread_rwlock_t * restrict lock,pthread_rwlockattr_t *restarict attr);
int pthread_rwlock_destroy(pthread_rwlock_t * lock);
int pthread_rwlock_rdlock(pthread_rwlock_t *lock);
int pthread_rwlock_wrlock(pthread_rwlock_t *lock);
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
</code>
返回0表示成功 \\
可以多个进程申请读锁，只能有一个进程申请写锁，申请写锁等等的时候读锁申请也会等待！ \\
另有两个申请锁的方式
<code c>
#include<pthread.h>
int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
</code>
这两个函数不阻塞，如果申请失败就退出，返回值为EBUSY。成功就返回0，可以有效的避免死锁！ \\
再来两个起时申请锁的函数，人家都有，咱也要
<code c>
#include <pthread.h>
int pthread_rwlock_timedrdlock(pthread_rwlock_t *rwlock,const struct timepsec * restrict tsptr);
int pthread_rwlock_timedwrlock(pthread_rwlock_t *rwlock,const struct timespec * restrict tsptr);
</code>
成功的返回0，超时返回ETIMEDOUT。还有一点要注意的是时间是绝对时间，不是那种几秒后超时，而是到几点为几分超时！
=====condition variable=====
这又是一种解决线程间同步的方法，使用pthread_cond_t这个数据类型描述它，我一直纠接于为什么要用condition,有mutex不就好了吗？可以用mutex保护一段代码，这段代码就是检查一个变量值，不是和condition的效果一样吗？写了一阵例子才明白过来，如果按我想的只能轮询，而用condition则可以睡眠，条件成熟再用pthread_cond_signal或者pthread_cond_broadcast唤醒其它等待condition的线程，为什么要用mutex与condition配合呢，主要是为了保证condition状态被修改时其它线程无法取这个状态值，因为这个时候取的值可能是错的。
=====spin lock=====
自旋锁与mutex相比是它不休眠，所以它锁定的时间一定要短，如果很长太浪费CPU了，这个功能比较适合在kernel中使用，因为中断的回调函数不能休眠，所以其它种类如mutex condition rwlock都不合适，因为它们不能lock的时候都会休眠！ \\
<code c>
#include <pthread.h>
int pthread_spin_init(pthread_spinlock_t * lock,int pshared);
int pthread_spin_destroy(pthread_spinlock_t *lock);
int pthread_spin_lock(pthread_spinlock_t *lock);
int pthread_spin_trylock(pthread_spinlock_t *lock);
int pthread_spin_unlock(pthread_spinlock_t *lock);
</code>
=====barriers=====
barriers也是一个用于线程同步的工具，主要的用处是让多个线程并行运行.举个简单的例子吧，我们把一项工作分成8份，用八个线程去完成，等这八个线程都完成之后我们再把结果取出来做个总结，实现方法就是pthread_barrier_init，等待的线程数可以设置成9，这样可以把主线程也看成一个线程，其它线程干完活就退出了只有主线程后面还有代码可以执行，所以总结由主线程来做。八个线程在执行完成之后都pthread_barrier_wait等待其它的线程执行完成。

======thread control======
昨天本来已经把pthread_attr_t的属性写完了，但是可能是没有保存成功，总之是没有了，只能重新写的。
=====pthread_attr_t=====
调用pthread_create的时候第二个参数是指向pthread_attr_t结构的指针，设定我们创建的线程有哪些特性，我们能够改变的特性也不是很多，有四个：
  * detachstate
  * stackaddr
  * stacksize
  * guardsize
有一组函数创建和销毁pthread_attr_t对象
<code c>
#include<pthread.h>
int pthread_attr_init(pthread_attr_t* attr);
int pthread_attr_destroy(pthread_attr_t* attr);
</code>
线程执行完之后有一个返回状态，有时候我们会关心它，默认我们是关心这个状态的，但也有些时候我们根本不关心它返回什么状态，在创建线程的时候我们就可以明确的告诉系统，我不关心这个线程的返回状态，于是用到了detachstate的值，它有两个值，PTHREAD_CREATE_DETACHSTATED和PTHREAD_CREATE_JOINABLE;但是我们不能直接用等号赋值，有两个函数可以使用
<code c>
#include<pthread.h>
int pthread_attr_getdetachstate(const pthread_attr_t * restrict attr,int * detachstate);
int pthread_attr_setdetachstate(pthread_attr_t* attr,int detachstate);
</code>
我们再来看看线程的栈，默认的办法是使用进程的栈，一个线程一块，只是这个空间有限，不一定够分。还有一个办法就是自己从堆上分配一块空间作为线程的栈，这就用到了线程的第二个属性：stackaddr。也有两个函数对这个属性存取
<code c>
#include <pthread.h>
int pthread_attr_getstack(const pthread_attr_t* restrict attr,void** restrict stackaddr,size_t* restrict stacksize);
int pthread_attr_setstack(pthread_attr_t* attr,void* stackaddr,size_t stacksize);
</code>
由于机器体系结构的不同，malloc可能返回申请内存的最低地址，也可能返回最高地址，但是这里只能是最低地址值，虽然书上没有说，不过我想自己申请的内存还得自己释放吧！ \\
有些时候我们需要的栈不是很大，但是比较默认就大了那么一点，那就不需要自己申请内存作为线程的栈，只需要把栈的默认配置值调大一点就行了，如果你觉得线程默认的栈大小太大，简直是浪费，也可以把它调也，但是不能小于最小值。
<code c>
#include <pthread.h>
int pthread_attr_getstacksize(const pthread_attr_t* restrict attr,size_t* restrict stacksize);
int pthread_attr_setstacksize(pthread_attr_t* attr,size_t stacksize);
</code>
在不需要自己管理栈空间，也就不调协stackaddr的时候还有一个值guardsize为栈提供一个缓冲区，不至于溢出。它的大小通常是系统中一页的大小。就是在创建线程的时候，在栈的后面再留一页大小的空间，防止栈溢出！
<code c>
#include <pthread.h>
int pthread_attr_getguardsize(const pthread_attr_t* restrict attr,size_t* restrict guardsize);
int pthread_attr_setguardsize(pthread_attr_t* attr,size_t guardsize);
</code>
=====pthread_mutexattr_t=====
这个是mutex的属性，我们只关心它的三个属性：
  * process-share
  * robust
  * type
和pthread_attr_t的初始化一样，它也提供两个函数实现初始化和销毁
<code c>
int pthread_mutexattr_init(pthread_mutexattr_t* attr);
int pthread_mutexattr_destroy(pthread_mutexattr_t* attr);
</code>
mutex不但可以用于一个进程的所有线程间，还可以用于进程间的。比如几个进程共用一块内存地址，那么对这块地址的访问就需要进行同步，这个就是process-shared的功能，它有两个可选值，一个是默认值PTHREAD_PROCESS_PRIVATE,另一个是用于进程间的PTHREAD_PROCESS_SHARED。它的操作函数是：
<code c>
#include<pthread.h>
int pthread_mutexattr_getpshared(const pthread_mutexattr_t* restrict attr,int* restrict pshared);
int pthread_mutexattr_setpshared(pthread_mutexattr_t* attr,int pshared);
</code>
robust属性与process-shared关联，多个进程等待一个mutex的时候，如果持有mutex的进程死了，别的进程无法获取mutex，只能无限的等，robust就是为了解决这个问题而生的。robust的值有两个一个是PTHREAD_MUTEX_STALLED,另一个是PTHREAD_MUTEX_ROBUST。如果设置成PTHREAD_MUTEX_STALLED,不只能一直等着了，如果设置成PTHREAD_MUTEX_ROBUST，就允许其它进程获取死掉进程持有的mutex，不过返回的值不是0，而EOWNERDEAD（拥有者死了）
<code c>
#include<pthread.h>
int pthread_mutexattr_getrobust(const pthread_mutexattr_t* restrict attr,int* restrict robust);
int pthread_mutexattr_setrobust(pthread_mutexattr_t* attr,int robust);
</code>
有时候unlock一个mutex不一定就会成功，如果不成功下面就没有办法用了，作为一个解决方案，我们可以在调用pthread_mutex_unlock(pthread_mutex_t* restrict mutext)之前先调用一下pthread_mutex_consistent(pthead_mutex_t* mutex);
<code c>
#include <pthread.h>
int pthread_mutex_consistent(pthread_mutex_t* mutex);
</code>
前面提到的两个属性是用于进程间同步的，下面这个type通用的，mutex通过type可以指定不一样的表现形式，
  * PTHREAD_MUTEX_NORMAL
  * PTHREAD_MUTEX_ERRORCHECK
  * PTHREAD_MUTEX_RECURSIVE
  * PTHREAD_MUTEX_DEFAULT
前面三个各有特点，后一个被指向前两个中的一个。PTHREAD_MUTEX_NORMAL不进行错误检查，如果你还没有unlock你又lock直接deadlock，一个线程锁定mutex，另一个线程unlock结果就是undefined,unlock一个unlocked的mutex结果也是undefined,如果mutex的type是PTHREAD_MUTEX_ERRORCHECK这几种情况都不会出那么大的问题，它会返回error，这给我们纠正留下了可能。PTHREAD_MUTEX_RECURSIVE比较特别，它的表现和PTHREAD_MUTEX_ERRORCHECK基本一样，只不过它可以lock一个locked的mutex，所以人家叫递归。它的作用就是用于那些只能单线程执行的函数。
<code c>
#include <pthread.h>
int pthread_mutexattr_gettype(const pthread_mutexattr_t* restrict attr,int* restrict type);
int pthread_mutexattr_settype(pthread_mutexattr_t* attr,int type);
</code>
